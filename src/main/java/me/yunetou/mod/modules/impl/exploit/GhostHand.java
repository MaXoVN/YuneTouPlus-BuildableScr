package me.yunetou.mod.modules.impl.exploit;

import java.util.Arrays;
import java.util.List;

import me.yunetou.api.util.entity.EntityUtil;
import me.yunetou.api.util.troll.Function2;
import me.yunetou.api.util.troll.RayTraceAction;
import me.yunetou.api.util.troll.RaytraceKt;
import me.yunetou.mod.modules.Category;
import me.yunetou.mod.modules.Module;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;
import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

public class GhostHand
        extends Module {
    public static GhostHand INSTANCE;
    private static final List<String> blockList;
    private static final Function2<BlockPos, IBlockState, RayTraceAction> function;

    public GhostHand() {
        super("GhostHand", "", Category.EXPLOIT);
        INSTANCE = this;
    }

    public static void handleRayTrace(double blockReachDistance, float partialTicks, CallbackInfoReturnable<RayTraceResult> cir) {
        EntityPlayerSP player;
        if (INSTANCE.isOff()) {
            return;
        }
        if (GhostHand.mc.currentScreen == null) {
            if (Keyboard.isKeyDown(56) || Keyboard.isKeyDown(184)) {
                return;
            }
            if (Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157)) {
                return;
            }
            if (Mouse.isButtonDown(1)) {
                return;
            }
        }
        if ((player = GhostHand.mc.player) != null) {
            Vec3d eyePos = EntityUtil.getEyePosition(player);
            Vec3d lookVec = player.getLook(partialTicks);
            World world = player.world;
            Vec3d sightEnd = eyePos.add(lookVec.x * blockReachDistance, lookVec.y * blockReachDistance, lookVec.z * blockReachDistance);
            RayTraceResult rayTrace = RaytraceKt.rayTrace(world, eyePos, sightEnd, 50, function);
            if (rayTrace == null) {
                RayTraceResult.Type miss = RayTraceResult.Type.MISS;
                Vec3d vec3d = sightEnd;
                EnumFacing up = EnumFacing.UP;
                double $this$fastFloor$iv$iv = sightEnd.x;
                int n2 = (int)($this$fastFloor$iv$iv + 1.073741824E9) - 0x40000000;
                $this$fastFloor$iv$iv = sightEnd.y;
                int n3 = (int)($this$fastFloor$iv$iv + 1.073741824E9) - 0x40000000;
                $this$fastFloor$iv$iv = sightEnd.z;
                BlockPos blockPos = new BlockPos(n2, n3, (int)($this$fastFloor$iv$iv + 1.073741824E9) - 0x40000000);
                rayTrace = new RayTraceResult(miss, vec3d, up, blockPos);
            }
            cir.setReturnValue(rayTrace);
        }
    }

    private static RayTraceAction function$lambda(BlockPos blockPos, IBlockState blockState) {
        boolean ignoreListed;
        Block block = blockState.getBlock();
        if (block != Blocks.AIR && block.canCollideCheck(blockState, false) && (ignoreListed = true) != blockList.contains(String.valueOf(block.getRegistryName()))) {
            RayTraceAction.Calc rayTraceAction = RayTraceAction.Calc.INSTANCE;
            return rayTraceAction;
        }
        RayTraceAction.Skip rayTraceAction = RayTraceAction.Skip.INSTANCE;
        return rayTraceAction;
    }

    static {
        blockList = Arrays.asList("minecraft:bedrock", "minecraft:portal_frame", "minecraft:portal");
        function = GhostHand::function$lambda;
    }
}