package me.yunetou.mod.modules.impl.exploit;

import me.yunetou.api.events.impl.PacketEvent;
import me.yunetou.api.events.impl.UpdateWalkingPlayerEvent;
import me.yunetou.mod.modules.Category;
import me.yunetou.mod.modules.Module;
import me.yunetou.mod.modules.settings.Setting;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class GodMode
        extends Module {
    private final Setting<Boolean> remount = this.add(new Setting<>("Remount", false));
    private Entity entity;

    public GodMode() {
        super("GodMode", "test", Category.EXPLOIT);
    }

    @Override
    public void onEnable() {
        if (GodMode.mc.world != null) {
            if (GodMode.mc.player.getRidingEntity() != null) {
                this.entity = GodMode.mc.player.getRidingEntity();
                GodMode.mc.renderGlobal.loadRenderers();
                this.hideEntity();
                GodMode.mc.player.setPosition(GodMode.mc.player.getPosition().getX(), GodMode.mc.player.getPosition().getY() - 1, GodMode.mc.player.getPosition().getZ());
            }
        }
        if (GodMode.mc.world != null && this.remount.getValue()) {
            this.remount.setValue(false);
        }
    }

    @Override
    public void onDisable() {
        if (this.remount.getValue()) {
            this.remount.setValue(false);
        }
        GodMode.mc.player.dismountRidingEntity();
        GodMode.mc.player.connection.sendPacket(new CPacketEntityAction(GodMode.mc.player, CPacketEntityAction.Action.START_SNEAKING));
        GodMode.mc.player.connection.sendPacket(new CPacketEntityAction(GodMode.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send event) {
        if (GodMode.fullNullCheck()) {
            return;
        }
        if (event.getPacket() instanceof CPacketPlayer.Position || event.getPacket() instanceof CPacketPlayer.PositionRotation) {
            event.setCanceled(true);
        }
    }

    private void hideEntity() {
        if (GodMode.mc.player.getRidingEntity() != null) {
            GodMode.mc.player.dismountRidingEntity();
            GodMode.mc.world.removeEntity(this.entity);
        }
    }

    private void showEntity(Entity entity2) {
        entity2.isDead = false;
        GodMode.mc.world.loadedEntityList.add(entity2);
        GodMode.mc.player.startRiding(entity2, true);
    }

    @SubscribeEvent
    public void onPlayerWalkingUpdate(UpdateWalkingPlayerEvent event) {
        if (GodMode.fullNullCheck()) {
            return;
        }
        if (this.entity == null) {
            return;
        }
        if (event.getStage() == 0) {
            if (this.remount.getValue()) {
                this.showEntity(this.entity);
            }
            this.entity.setPositionAndRotation(GodMode.mc.player.posX, GodMode.mc.player.posY, GodMode.mc.player.posZ, GodMode.mc.player.rotationYaw, GodMode.mc.player.rotationPitch);
            GodMode.mc.player.connection.sendPacket(new CPacketPlayer.Rotation(GodMode.mc.player.rotationYaw, GodMode.mc.player.rotationPitch, true));
            GodMode.mc.player.connection.sendPacket(new CPacketInput(GodMode.mc.player.movementInput.moveForward, GodMode.mc.player.movementInput.moveStrafe, false, false));
            GodMode.mc.player.connection.sendPacket(new CPacketVehicleMove(this.entity));
        }
    }
}
